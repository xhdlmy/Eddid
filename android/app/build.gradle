apply plugin: "com.android.application"

import com.android.build.OutputFile

// bundleAssetName: "index.android.bundle"
project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false

android {
    rootProject.setDefaultConfig project

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.eddid"
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
//        manifestPlaceholders = [
//                MTA_APPKEY : "A6R3WV3SI6CB",
//                MTA_CHANNEL : "default",
//        ]
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }


    flavorDimensions ("channel")
    productFlavors {
        yingyongbao {
            dimension "channel"
            applicationId "com.eddid"
        }
        huawei {
            dimension "channel"
            applicationId "com.eddid"
        }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [
                MTA_APPKEY : "A6R3WV3SI6CB",
                MTA_CHANNEL : flavor.name,
        ]
    }

    signingConfigs {
        release {
            keyAlias "key_bruce"
            keyPassword "bruce123"
            storeFile file("C:\\Users\\Bruce\\bruce.jks")
            storePassword "bruce123"
        }
    }

    buildTypes {
        release {
            minifyEnabled true // 打开混淆
            shrinkResources true // 资源压缩
            zipAlignEnabled true // 资源按照 4 字节对齐
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release //签名
        }
    }

    /*Gradle3.3 以上修改的方法*/
    applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            variant.getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.absolutePath + "/output")
        }

        def time = time();

        variant.getPackageApplicationProvider().get().outputScope.apkDatas.forEach { apkData ->
            apkData.outputFileName = ((project.name != "app") ? project.name : rootProject.name) + "-" +
                    variant.versionName + "_" +
                    variant.flavorName + "_" +
                    variant.buildType.name + "_" +
                    time +
                    ".apk"
        }
    }

}

static def time() {
    return new Date().format('yyyyMMddhhmmss')
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:${rootProject.ext.reactNativeVersion}"  // From node_modules
    //MTA
    implementation 'com.qq.mta:mta:3.4.2'
    implementation 'com.tencent.mid:mid:3.73-release'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
